'use strict';

var path = require('path');
var craco = require('@craco/craco');

var name = "@dealmore/craco-plugin-babel-include";

const babelLoaderName = 'babel-loader';
function getBabelLoader(webpackConfig, throwError) {
  const {
    isFound,
    match: {
      loader
    }
  } = craco.getLoader(webpackConfig, craco.loaderByName(babelLoaderName));

  if (!isFound) {
    throwError(`Could not find ${babelLoaderName} in the webpack config!`, `webpack+${babelLoaderName}`);
  }

  return loader;
}

const repoName = 'dealmore/craco-plugins';

/**
 * Craco plugin which allows to import uncompiled modules from
 * outside the `src` directory
 */

const throwError = (message, githubIssueQuery) => craco.throwUnexpectedConfigError({
  packageName: name,
  githubRepo: repoName,
  message,
  githubIssueQuery
});

const babelIncludePlugin = {
  overrideWebpackConfig: ({
    webpackConfig,
    pluginOptions,
    context: {
      paths
    }
  }) => {
    // Remove ModuleScopePlugin
    if (Array.isArray(webpackConfig.resolve.plugins)) {
      webpackConfig.resolve.plugins = webpackConfig.resolve.plugins.filter(p => p.constructor.name !== 'ModuleScopePlugin');
    } // Add the paths to the babel-loader


    const babelLoader = getBabelLoader(webpackConfig, throwError);
    let includePaths = Array.isArray(pluginOptions.include) ? pluginOptions.include : [pluginOptions.include]; // Ensure absolute paths

    includePaths = includePaths.map(_path => {
      try {
        // Check if the path is an npm module
        return path.dirname(require.resolve(path.join(_path, 'package.json'), {
          paths: [paths.appPath]
        }));
      } catch (err) {
        // Otherwise resolve local
        return path.resolve(_path);
      }
    });

    if (!Array.isArray(babelLoader.include)) {
      babelLoader.include = [babelLoader.include];
    }

    babelLoader.include.push(...includePaths);
    return webpackConfig;
  }
};

module.exports = babelIncludePlugin;
//# sourceMappingURL=craco-plugin-babel-include.cjs.development.js.map
